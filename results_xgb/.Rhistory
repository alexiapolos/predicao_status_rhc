load("~/github_repo/predicao_status_rhc/ambientes_R/3_modelos_11102024.Rdata")
load("~/github_repo/predicao_status_rhc/ambientes_R/2_particao_dados_11102024.Rdata")
setwd("~/github_repo/predicao_status_rhc")
library(dplyr)
library(ggplot2)
# Random Forest - resultados do conjunto de treinamento e validação
rf_preds <- best_model$pred %>%
mutate(model = "Random Forest", phase = "validação")
# XGBoost - resultados do conjunto de treinamento e validação
xgb_preds <- xgb_model_random$pred %>%
mutate(model = "XGBoost", phase = "validação")
# Combinar predições de ambos os modelos
combined_preds <- bind_rows(rf_preds, xgb_preds)
# Calcular acurácia por fold (validação cruzada)
accuracy_results <- combined_preds %>%
group_by(model, phase, Resample) %>%
summarise(accuracy = mean(pred == obs))
# Gráfico para Treinamento e Validação
ggplot(accuracy_results, aes(x = Resample, y = accuracy, color = model, group = model)) +
geom_line() +
geom_point() +
labs(title = "Curvas de Acurácia para Conjuntos de Treinamento e Validação",
x = "Fold de Validação",
y = "Acurácia",
color = "Modelo") +
theme_minimal()
library(openxlsx)
setwd("~/github_repo/predicao_status_rhc/results_xgb")
# Calcular a acurácia para o conjunto de teste (para XGBoost)
previsoes_xgb_model_random = read.xlsx('dados_preditos_xgb.xlsx')
View(previsoes_xgb_model_random)
accuracy_xgb_teste <- MLmetrics::Accuracy(previsoes_xgb_model_random, dados_teste$status_doenca)
accuracy_xgb_teste <- matriz_confusao_previsoes_xgb_model_random$overall['Accuracy']
# Calcular a acurácia para o conjunto de teste (para XGBoost)
previsoes_xgb_model_random = read.xlsx('dados_preditos_xgb.xlsx')
matriz_confusao_previsoes_xgb_model_random <- confusionMatrix(previsoes_xgb_model_random, dados_teste$status_doenca)
# 1. Pacotes ----------------------------------------------------------------
library(caret)
matriz_confusao_previsoes_xgb_model_random <- confusionMatrix(previsoes_xgb_model_random, dados_teste$status_doenca)
matriz_confusao_previsoes_xgb_model_random <- confusionMatrix(previsoes_xgb_model_random$predicoes, dados_teste$status_doenca)
matriz_confusao_previsoes_xgb_model_random <- confusionMatrix(previsoes_xgb_model_random$predicoes, dados_teste$status_doenca)
accuracy <- matriz_confusao_previsoes_xgb_model_random$overall['Accuracy']
View(previsoes_xgb_model_random)
previsoes_xgb_model_random <- make_valid_factor_levels(previsoes_xgb_model_random)
library(tidyverse)
library(caret)
previsoes_xgb_model_random <- make_valid_factor_levels(previsoes_xgb_model_random)
# ajustando fatores -------------------------------------------------------
make_valid_factor_levels <- function(df) {
factor_vars <- sapply(df, is.factor)
df[factor_vars] <- lapply(df[factor_vars], function(x) {
levels(x) <- make.names(levels(x))
x
})
return(df)
}
previsoes_xgb_model_random <- make_valid_factor_levels(previsoes_xgb_model_random)
View(previsoes_xgb_model_random)
View(accuracy_results)
load("~/github_repo/predicao_status_rhc/ambientes_R/3_modelos_11102024.Rdata")
View(xgb_model_random)
View(xgb_model_random)
xgb_model_random
# teste -------------------------------------------------------------------
accuracy_xgb_teste <- 0.5899
accuracy_rf_teste <- 0.5952
# Adicionar essa informação ao dataframe para ambos os modelos
test_results <- data.frame(
model = c("XGBoost", "Random Forest"),
phase = c("teste", "teste"),
accuracy = c(accuracy_xgb_teste, accuracy_rf_teste)
)
# Plotar o resultado de teste para ambos os modelos
ggplot(test_results, aes(x = model, y = accuracy, fill = model)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Acurácia no Conjunto de Teste para Random Forest e XGBoost",
x = "Modelo",
y = "Acurácia") +
theme_minimal()
# Random Forest - resultados do conjunto de treinamento e validação
rf_preds <- best_model$pred %>%
mutate(model = "Random Forest", phase = "validação")
# XGBoost - resultados do conjunto de treinamento e validação
xgb_preds <- xgb_model_random$pred %>%
mutate(model = "XGBoost", phase = "validação")
# Combinar predições de ambos os modelos
combined_preds <- bind_rows(rf_preds, xgb_preds)
# Calcular acurácia por fold (validação cruzada)
accuracy_results <- combined_preds %>%
group_by(model, phase, Resample) %>%
summarise(accuracy = mean(pred == obs))
# Adicionar a acurácia de teste ao dataframe de validação
test_results <- data.frame(
model = c("XGBoost", "Random Forest"),
phase = c("teste", "teste"),
Resample = c("Teste", "Teste"),  # Usamos "Teste" para colocá-lo no gráfico
accuracy = c(accuracy_xgb_teste, accuracy_rf_teste)
)
# Combinar os resultados de validação e teste
accuracy_combined <- bind_rows(accuracy_results, test_results)
# Gráfico para Treinamento, Validação e Teste
ggplot(accuracy_combined, aes(x = Resample, y = accuracy, color = model, group = model)) +
geom_line(data = subset(accuracy_combined, phase == "validação"), aes(linetype = phase), size = 1) +
geom_point(size = 3) +
geom_point(data = subset(accuracy_combined, phase == "teste"), shape = 21, fill = "black", size = 4, stroke = 1.5) +
labs(title = "Curvas de Acurácia - Treinamento, Validação e Teste",
x = "Fold de Validação e Conjunto de Teste",
y = "Acurácia",
color = "Modelo",
linetype = "Fase") +
theme_minimal() +
theme(legend.position = "bottom")
library(ggplot2)
# Dados de treinamento e validação
rf_preds <- best_model$pred %>%
mutate(model = "Random Forest", phase = "validação")
xgb_preds <- xgb_model_random$pred %>%
mutate(model = "XGBoost", phase = "validação")
combined_preds <- bind_rows(rf_preds, xgb_preds)
# Calcular a acurácia por fold (validação cruzada)
accuracy_results <- combined_preds %>%
group_by(model, phase, Resample) %>%
summarise(accuracy = mean(pred == obs))
# Adicionar os resultados de teste
test_results <- data.frame(
model = c("XGBoost", "Random Forest"),
phase = c("teste", "teste"),
Resample = c("Teste", "Teste"),
accuracy = c(accuracy_xgb_teste, accuracy_rf_teste)
)
# Combinar os resultados de validação e teste
accuracy_combined <- bind_rows(accuracy_results, test_results)
# Gráfico atualizado
ggplot(accuracy_combined, aes(x = Resample, y = accuracy, color = model, group = model)) +
# Curvas de Validação
geom_line(data = subset(accuracy_combined, phase == "validação"),
aes(linetype = phase), size = 1.2, alpha = 0.8) +
# Pontos de Validação
geom_point(size = 3, alpha = 0.8) +
# Pontos de Teste com estilo diferenciado
geom_point(data = subset(accuracy_combined, phase == "teste"),
shape = 21, fill = "red", color = "black", size = 6, stroke = 1.5) +
# Adicionar rótulos sobre os pontos de teste
geom_text(data = subset(accuracy_combined, phase == "teste"),
aes(label = round(accuracy, 3)),
vjust = -1, size = 5, color = "black") +
# Títulos e rótulos dos eixos
labs(title = "Curvas de Acurácia - Treinamento, Validação e Teste",
subtitle = "Comparação entre Random Forest e XGBoost",
x = "Fold de Validação e Conjunto de Teste",
y = "Acurácia",
color = "Modelo",
linetype = "Fase") +
# Melhorar o tema
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(face = "bold"),
panel.grid.major = element_line(size = 0.5),
panel.grid.minor = element_blank()
) +
# Ajustar a escala de cores para tornar as linhas mais visíveis
scale_color_manual(values = c("Random Forest" = "#0072B2", "XGBoost" = "#D55E00")) +
# Ajustar o eixo X para refletir que há uma fase de teste
scale_x_discrete(labels = function(x) ifelse(x == "Teste", "Conjunto de Teste", paste("Fold", x)))
# Dados de treinamento e validação
rf_preds <- best_model$pred %>%
mutate(model = "Random Forest", phase = "validação")
xgb_preds <- xgb_model_random$pred %>%
mutate(model = "XGBoost", phase = "validação")
combined_preds <- bind_rows(rf_preds, xgb_preds)
# Calcular a acurácia por fold (validação cruzada) e converter para porcentagem
accuracy_results <- combined_preds %>%
group_by(model, phase, Resample) %>%
summarise(accuracy = mean(pred == obs) * 100)
# Adicionar os resultados de teste com as acurácias convertidas para porcentagem
test_results <- data.frame(
model = c("XGBoost", "Random Forest"),
phase = c("teste", "teste"),
Resample = c("Teste", "Teste"),
accuracy = c(accuracy_xgb_teste * 100, accuracy_rf_teste * 100)
)
# Combinar os resultados de validação e teste
accuracy_combined <- bind_rows(accuracy_results, test_results)
# Gráfico atualizado
ggplot(accuracy_combined, aes(x = Resample, y = accuracy, color = model, group = model)) +
# Curvas de Validação
geom_line(data = subset(accuracy_combined, phase == "validação"),
aes(linetype = phase), size = 1.2, alpha = 0.8) +
# Pontos de Validação
geom_point(size = 3, alpha = 0.8) +
# Pontos de Teste com estilo diferenciado
geom_point(data = subset(accuracy_combined, phase == "teste"),
shape = 21, fill = "red", color = "black", size = 6, stroke = 1.5) +
# Adicionar rótulos sobre os pontos de teste com acurácia em porcentagem e o nome do modelo
geom_text(data = subset(accuracy_combined, phase == "teste"),
aes(label = paste0(model, ": ", round(accuracy, 1), "%")),
vjust = -1, size = 5, color = "black") +
# Títulos e rótulos dos eixos
labs(title = "Curvas de Acurácia - Treinamento, Validação e Teste",
subtitle = "Comparação entre Random Forest e XGBoost",
x = "Fold de Validação e Conjunto de Teste",
y = "Acurácia (%)",
color = "Modelo",
linetype = "Fase") +
# Melhorar o tema
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, face = "italic"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(face = "bold"),
panel.grid.major = element_line(size = 0.5),
panel.grid.minor = element_blank()
) +
# Ajustar a escala de cores para tornar as linhas mais visíveis
scale_color_manual(values = c("Random Forest" = "#0072B2", "XGBoost" = "#D55E00")) +
# Ajustar o eixo X para refletir que há uma fase de teste
scale_x_discrete(labels = function(x) ifelse(x == "Teste", "Conjunto de Teste", paste("Fold", x)))
